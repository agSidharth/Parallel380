--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         6291456 B, 64 B, 12-way associative
Command:          ./classify rfile dfile 1009072 4 1
Data file:        out
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   /home/sidharth/Parallel380/A1/classify.cpp
Auto-annotation:  off

--------------------------------------------------------------------------------
Ir             I1mr  ILmr  Dr            D1mr        DLmr        Dw         D1mw    DLmw    
--------------------------------------------------------------------------------
11,906,323,456 3,214 3,079 2,284,302,261 126,797,447 126,759,830 89,632,445 702,751 701,729  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir            I1mr ILmr Dr            D1mr        DLmr        Dw         D1mw    DLmw     file:function
--------------------------------------------------------------------------------
6,067,561,059    3    3 1,014,119,414 126,264,139 126,264,139  1,009,100 127,017 127,017  /home/sidharth/Parallel380/A1/classify.cpp:classify(Data&, Ranges const&, unsigned int) [clone ._omp_fn.1]
5,038,414,474    1    1 1,009,902,850       4,615       3,505  1,009,072       0       0  /home/sidharth/Parallel380/A1/classify.h:classify(Data&, Ranges const&, unsigned int) [clone ._omp_fn.0]
  519,253,851   37   37   172,281,847         339         220 53,900,944       0       0  ???:std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const
  102,522,614  611  598    33,721,020         492         294  9,101,193     106      87  ???:???
   62,687,028   10   10    25,276,949          45          42  7,077,639       0       0  ???:std::istream::sentry::sentry(std::istream&, bool)
   55,609,012    5    5    17,188,240           2           1 10,110,730 126,135 126,135  ???:std::istream::operator>>(int&)
   15,533,504    5    5     3,003,999           0           0  2,008,003  61,877  61,877  /home/sidharth/Parallel380/A1/classify.h:readRanges(char const*)

--------------------------------------------------------------------------------
-- User-annotated source: /home/sidharth/Parallel380/A1/classify.cpp
--------------------------------------------------------------------------------
Ir            I1mr ILmr Dr            D1mr        DLmr        Dw        D1mw    DLmw    

            .    .    .             .           .           .         .       .       .  #include "classify.h"
            .    .    .             .           .           .         .       .       .  #include <omp.h>
            .    .    .             .           .           .         .       .       .  
            .    .    .             .           .           .         .       .       .  Data classify(Data &D, const Ranges &R, unsigned int numt)
           12    2    2             1           0           0         7       0       0  { // Classify each item in D into intervals (given by R). Finally, produce in D2 data sorted by interval
            2    0    0             0           0           0         0       0       0     assert(numt < MAXTHREADS);
        3,090    3    3            17          15          15         1       1       1     Counter counts[R.num()]; // I need on counter per interval. Each counter can keep pre-thread subcount.
            .    .    .             .           .           .         .       .       .     
            .    .    .             .           .           .         .       .       .     /*
            .    .    .             .           .           .         .       .       .     #pragma omp for
            .    .    .             .           .           .         .       .       .     for(int i=0;i<D.ndata;i+=1)
            .    .    .             .           .           .         .       .       .     {
            .    .    .             .           .           .         .       .       .        int tid = omp_get_thread_num(); // I am thread number tid
            .    .    .             .           .           .         .       .       .        int v = D.data[i].value = R.range(D.data[i].key);
            .    .    .             .           .           .         .       .       .        counts[v].increase(tid);
            .    .    .             .           .           .         .       .       .     }
            .    .    .             .           .           .         .       .       .     */
            .    .    .             .           .           .         .       .       .     //*
           71    2    2            33           9           6        25       1       0     #pragma omp parallel num_threads(numt)
            .    .    .             .           .           .         .       .       .     {
            4    0    0             0           0           0         4       0       0        int tid = omp_get_thread_num(); // I am thread number tid
    4,036,300    0    0     1,009,080           1           0         0       0       0        for(int i=tid; i<D.ndata; i+=numt) { // Threads together share-loop through all of Data
    4,036,300    1    1     1,009,080     504,538     478,185 1,009,072       4       1           int v = D.data[i].value = R.range(D.data[i].key);// For each data, find the interval of data's key,
            .    .    .             .           .           .         .       .       .  							  // and store the interval id in value. D is changed.
    1,009,072    0    0     1,009,072       4,004       3,036         0       0       0           counts[v].increase(tid); // Found one key in interval v
            .    .    .             .           .           .         .       .       .        }
            .    .    .             .           .           .         .       .       .     }
            .    .    .             .           .           .         .       .       .     //*/
            .    .    .             .           .           .         .       .       .  
            .    .    .             .           .           .         .       .       .     // Accumulate all sub-counts (in each interval;'s counter) into rangecount
            7    0    0             1           0           0         1       0       0     unsigned int *rangecount = new unsigned int[R.num()];
        2,012    1    1             2           1           1         0       0       0     for(int r=0; r<R.num(); r++) { // For all intervals
        1,001    0    0             0           0           0     1,001      62      61        rangecount[r] = 0;
       15,015    0    0         2,002       1,000         247         0       0       0        for(int t=0; t<numt; t++) // For all threads
        4,004    0    0         4,004           0           0         0       0       0           rangecount[r] += counts[r].get(t);
            .    .    .             .           .           .         .       .       .        // std::cout << rangecount[r] << " elements in Range " << r << "\n"; // Debugging statement
            .    .    .             .           .           .         .       .       .     }
            .    .    .             .           .           .         .       .       .  
            .    .    .             .           .           .         .       .       .     // Compute prefx sum on rangecount.
        2,006    0    0             0           0           0         0       0       0     for(int i=1; i<R.num(); i++) {
        2,000    0    0         2,000          49           0         0       0       0        rangecount[i] += rangecount[i-1];
            .    .    .             .           .           .         .       .       .     }
            .    .    .             .           .           .         .       .       .  
            .    .    .             .           .           .         .       .       .     // Now rangecount[i] has the number of elements in intervals before the ith interval.
            .    .    .             .           .           .         .       .       .  
            1    1    1             1           1           1         0       0       0     Data D2 = Data(D.ndata); // Make a copy
            .    .    .             .           .           .         .       .       .  
            .    .    .             .           .           .         .       .       .     /*
            .    .    .             .           .           .         .       .       .     unsigned int tempCount[R.num()] = {0};
            .    .    .             .           .           .         .       .       .     for(int i=0;i<D.ndata;i++)
            .    .    .             .           .           .         .       .       .     {
            .    .    .             .           .           .         .       .       .        int r = D.data[i].value;
            .    .    .             .           .           .         .       .       .        D2.data[rangecount[r-1]+tempCount[r]] = D.data[i];
            .    .    .             .           .           .         .       .       .        tempCount[r]++;
            .    .    .             .           .           .         .       .       .     }
            .    .    .             .           .           .         .       .       .     */
            .    .    .             .           .           .         .       .       .     //*
            .    .    .             .           .           .         .       .       .     
           87    1    1            36           5           5        30       1       1     #pragma omp parallel num_threads(numt)
            .    .    .             .           .           .         .       .       .     {
            4    1    1             0           0           0         4       3       3        int tid = omp_get_thread_num();
        3,035    0    0         1,017       1,002       1,002         0       0       0        for(int r=tid; r<R.num(); r+=numt) { // Thread together share-loop through the intervals 
        1,001    0    0             0           0           0         0       0       0           int rcount = 0;
            .    .    .             .           .           .         .       .       .           //#pragma omp barrier
3,030,246,219    0    0         1,001           0           0         0       0       0           for(int d=0; d<D.ndata; d++) // For each interval, thread loops through all of data and  
2,020,162,144    1    1 1,010,081,072 126,261,135 126,261,135         0       0       0               if(D.data[d].value == r) // If the data item is in this interval 
1,017,148,580    0    0     4,036,288       1,997       1,997 1,009,072 127,014 127,014                   D2.data[rangecount[r-1]+rcount++] = D.data[d]; // Copy it to the appropriate place in D2.
            .    .    .             .           .           .         .       .       .        }
            .    .    .             .           .           .         .       .       .     }
            .    .    .             .           .           .         .       .       .     //*/
            2    0    0             2           0           0         0       0       0     return D2;
           14    0    0             9           2           2         0       0       0  }

--------------------------------------------------------------------------------
Ir            I1mr ILmr Dr            D1mr        DLmr        Dw        D1mw    DLmw    
--------------------------------------------------------------------------------
6,076,671,983   13   13 1,017,154,718 126,773,759 126,745,632 2,019,217 127,086 127,081  events annotated

